I"f'<p>The ability to simulate quantum systems offers invaluable opportunities for building up intuition and understanding about the bizzare world of quantum mechanics. We developed <strong><em>QuSpin</em></strong> – an <strong>open source</strong> Python package for exact diagonalisation and dynamics of quantum many-body systems.</p>

<p>Check out QuSpin’s <a href="http://weinbe58.github.io/QuSpin/index.html"><strong><em>Documentation</em></strong></a> for guidance how to install and use tha package, as well as the project’s <a href="https://github.com/weinbe58/QuSpin#quspin"><em>Github repository</em></a> for more information.</p>

<p>Understanding the physics of many-body quantum condensed matter systems often involves a great deal of numerical simulations, be it to gain intuition about the complicated problem of interest, or because they do not admit an analytical solution which can be expressed in a closed form. <a href="https://scipost.org/10.21468/SciPostPhys.2.1.003">QuSpin</a> is an ED-based package which wraps some of the functionality of Python’s Numpy and Scipy libraries, to efficiently allow for the user-friendly simulation of quantum many-body systems <span style="color:blue">[1,2]</span>.</p>

<p>Being scientists, it is particularly useful to have a reliable toolbox available at our disposal which allows us to quickly simulate and study these and related nonequilibrium problems. As such, QuSpin offers easy access to performing numerical simulations, which can facilitate the development and inspiration of new ideas and the discovery of novel phenomena, eliminating the cost of spending time to develop a reliable code. Besides theorists, QuSpin will hopefully even prove valuable to experimentalists working on problems containing dynamical setups, as it can help students and researchers focus on perfecting the experiment, rather than worry about writing the supporting simulation code.</p>

<p>With the computational processing power growing higher than ever before, the role played by simulations for theoretical research becomes increasingly more important too. It can, therefore, be expected that in the near future quantum simulations become an integral part of the standard physics university curriculum, and having easily accessible toolboxes, such as QuSpin, is one of the required prerequisites for this anticipated change.</p>

<p>The following snippet of code shows how one can employ QuSpin to study the thermalising dynamics of the following peoriodically-driven closed spin chain</p>

\[i \partial_t|\psi(t)\rangle = H(t)|\psi(t)\rangle,\qquad |\psi(0)\rangle=|\mathrm{GS}[H(t=0)]\rangle\]

\[H(t) = \sum_{j=0}^{L-1} \left( JS^z_{j+1}S^z_j + hS^z_j + g\cos(\Omega t)S^x_j \right)\]

<p>in the zero-momentum sector (<code class="language-plaintext highlighter-rouge">kblock=0</code>) of positive parity (<code class="language-plaintext highlighter-rouge">pblock=1</code>). Click <a href="http://weinbe58.github.io/QuSpin/Examples.html">here for more examples</a>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">quspin.operators</span> <span class="kn">import</span> <span class="n">hamiltonian</span> <span class="c1"># Hamiltonians and operators
</span><span class="kn">from</span> <span class="nn">quspin.basis</span> <span class="kn">import</span> <span class="n">spin_basis_1d</span> <span class="c1"># Hilbert space spin basis
</span><span class="kn">from</span> <span class="nn">quspin.tools.Floquet</span> <span class="kn">import</span> <span class="n">Floquet_t_vec</span> <span class="c1"># stroboscopic time vector
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> <span class="c1"># generic math functions
#
##### define model parameters #####
</span><span class="n">L</span><span class="o">=</span><span class="mi">4</span> <span class="c1"># system size
</span><span class="n">J</span><span class="o">=</span><span class="mf">1.0</span> <span class="c1"># spin interaction
</span><span class="n">g</span><span class="o">=</span><span class="mf">0.809</span> <span class="c1"># transverse field
</span><span class="n">h</span><span class="o">=</span><span class="mf">0.9045</span> <span class="c1"># longitudinal field
##### define periodic drive #####
</span><span class="n">Omega</span><span class="o">=</span><span class="mf">4.5</span> <span class="c1"># drive frequency
</span><span class="k">def</span> <span class="nf">drive</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">Omega</span><span class="p">):</span>
	<span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">Omega</span><span class="o">*</span><span class="n">t</span><span class="p">)</span>
<span class="n">drive_args</span><span class="o">=</span><span class="p">[</span><span class="n">Omega</span><span class="p">]</span>
<span class="c1">#
##### construct basis in the 0-total momentum and +1-parity sector
</span><span class="n">basis</span><span class="o">=</span><span class="n">spin_basis_1d</span><span class="p">(</span><span class="n">L</span><span class="o">=</span><span class="n">L</span><span class="p">,</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">kblock</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">pblock</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># define PBC site-coupling lists for operators
</span><span class="n">x_field</span><span class="o">=</span><span class="p">[[</span><span class="n">g</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">L</span><span class="p">)]</span>
<span class="n">z_field</span><span class="o">=</span><span class="p">[[</span><span class="n">h</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">L</span><span class="p">)]</span>
<span class="n">J_nn</span><span class="o">=</span><span class="p">[[</span><span class="n">J</span><span class="p">,</span><span class="n">i</span><span class="p">,(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">L</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">L</span><span class="p">)]</span> <span class="c1"># PBC
# static and dynamic lists
</span><span class="n">static</span><span class="o">=</span><span class="p">[[</span><span class="s">"zz"</span><span class="p">,</span><span class="n">J_nn</span><span class="p">],[</span><span class="s">"z"</span><span class="p">,</span><span class="n">z_field</span><span class="p">]]</span>
<span class="n">dynamic</span><span class="o">=</span><span class="p">[[</span><span class="s">"x"</span><span class="p">,</span><span class="n">x_field</span><span class="p">,</span><span class="n">drive</span><span class="p">,</span><span class="n">drive_args</span><span class="p">]]</span>
<span class="c1">##### construct Hamiltonian and define initial state
</span><span class="n">H</span><span class="o">=</span><span class="n">hamiltonian</span><span class="p">(</span><span class="n">static</span><span class="p">,</span><span class="n">dynamic</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">,</span><span class="n">basis</span><span class="o">=</span><span class="n">basis</span><span class="p">)</span>
<span class="c1"># get GS of H(t=0)
</span><span class="n">E</span><span class="p">,</span><span class="n">V</span><span class="o">=</span><span class="n">H</span><span class="p">.</span><span class="n">eigsh</span><span class="p">(</span><span class="n">time</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">which</span><span class="o">=</span><span class="s">'SA'</span><span class="p">)</span>
<span class="n">psi_i</span><span class="o">=</span><span class="n">V</span><span class="p">[:,</span><span class="mi">0</span><span class="p">].</span><span class="n">squeeze</span><span class="p">()</span>
<span class="c1">##### define time vector and evolve state
</span><span class="n">t</span><span class="o">=</span><span class="n">Floquet_t_vec</span><span class="p">(</span><span class="n">Omega</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">psi_t</span><span class="o">=</span><span class="n">H</span><span class="p">.</span><span class="n">evolve</span><span class="p">(</span><span class="n">psi_i</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">i</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">vals</span><span class="p">)</span></code></pre></figure>

<p><em>References</em>:<br />
<a href="https://scipost.org/SciPostPhys.2.1.003" style="color: #0000cd">[1] P. Weinberg and <strong>M.B.</strong>, <em>SciPost Phys.</em> <strong>2</strong>, 003 (2017).</a><br />
<a href="https://scipost.org/SciPostPhys.7.2.020" style="color: #0000cd">[2] P. Weinberg and <strong>M.B.</strong>, <em>SciPost Phys.</em> <strong>7</strong>, 020 (2019).</a></p>

<p>Copyright © 2017 Marin Bukov</p>
:ET